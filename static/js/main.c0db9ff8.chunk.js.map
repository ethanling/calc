{"version":3,"sources":["context/NumberProvider.js","themes/ThemeStyles.js","context/ThemeProvider.js","components/NumberButton.js","components/EqualsButton.js","components/ClearButton.js","lib/Symbols.js","components/OperationButton.js","components/NegativeButton.js","components/BackButton.js","components/Buttons.js","components/Display.js","components/Calc.js","components/Controls.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["NumberContext","React","createContext","NumberProvider","props","useState","number","setNumber","storedNumber","setStoredNumber","functionType","setFunctionType","handleSetDisplayValue","num","includes","replace","handleSetStoredValue","handleClearValue","handleBackButton","deletedNumber","slice","length","handleSetCalcFunction","type","console","log","handleMath","limitSumIntegars","sum","parseFloat","Provider","value","handleToggleNegative","positiveNumber","handleKeyInput","key","isNaN","parseInt","children","themes","dark","app","backgroundColor","color","calc","display","button","operationButton","modifierButton","controls","accent","light","initialState","theme","toggle","ThemeContext","ThemeProvider","setLight","useEffect","isLight","localStorage","getItem","setItem","JSON","stringify","NumberButton","buttonValue","useContext","className","style","onClick","EqualsButton","ClearButton","symbols","operator","code","OperationButton","String","fromCharCode","filter","map","item","NegativeButton","BackButton","Buttons","Display","addLineBreaks","formattedNum","arr","match","i","Calc","handleKeyDown","e","window","addEventListener","removeEventListener","div","animate","scale","Controls","Sidebar","aside","opacity","transition","duration","href","App","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0db9ff8.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const NumberContext = React.createContext();\n\nconst NumberProvider = props => {\n    const [number, setNumber] = useState('');\n    const [storedNumber, setStoredNumber] = useState('');\n    const [functionType, setFunctionType] = useState('');\n\n    const handleSetDisplayValue = num => {\n        if (!number.includes('.') || num !== '.') {\n            setNumber(`${(number + num).replace(/^0+/, '')}`);\n        }\n    }\n\n    const handleSetStoredValue = () => {\n        setStoredNumber(number);\n        setNumber('');\n    }\n\n    const handleClearValue = () => {\n        setNumber('');\n        setStoredNumber('');\n        setFunctionType('');\n    }\n\n    const handleBackButton = () => {\n        if (number !== '') {\n            const deletedNumber = number.slice(0, number.length - 1);\n            setNumber(deletedNumber);\n        }\n    }\n\n    const handleSetCalcFunction = type => {\n        console.log(\"Function\")\n        if (number) {\n            setFunctionType(type);\n            handleSetStoredValue();\n        }\n        if (storedNumber) {\n            setFunctionType(type);\n        }\n    }\n\n    const handleToggleNegative = () => {\n        if (number) {\n            if (number > 0) {\n                setNumber(`-${number}`)\n            } else {\n                const positiveNumber = number.slice(1);\n                setNumber(positiveNumber);\n            }\n        } else if (storedNumber > 0) {\n            setStoredNumber(`-${storedNumber}`);\n        } else {\n            const positiveNumber = storedNumber.slice(1);\n            setStoredNumber(positiveNumber);\n        }\n    }\n\n    const handleKeyInput = key => {\n        // Numbers\n        if (!isNaN(parseInt(key))) {\n            handleSetDisplayValue(key);\n        }\n        // Operators\n        if (key === '*' || key === '/' || key === '+' || key === '-') {\n            handleSetCalcFunction(key);\n        }\n        // Backspace\n        if (key === 'Backspace') {\n            handleBackButton();\n        }\n        // Clear\n        if (key === 'c') {\n            handleClearValue();\n        }\n        // Equals\n        if (key === '=' || key === 'Enter') {\n            handleMath();\n        }\n    }\n\n    const handleMath = () => {\n        // Cuts off sum at 9 integars\n        const limitSumIntegars = sum => {\n            return sum.length > 9 ? sum.slice(0, 8) : sum;\n        }\n\n        if (number && storedNumber) {\n            switch(functionType) {\n                case '+':\n                    setStoredNumber(`${limitSumIntegars(`${parseFloat(storedNumber) + parseFloat(number)}`)}`)\n                    break;\n                case '-':\n                    setStoredNumber(`${limitSumIntegars(`${parseFloat(storedNumber) - parseFloat(number)}`)}`)\n                    break;\n                case '/':\n                    setStoredNumber(`${limitSumIntegars(`${parseFloat(storedNumber) / parseFloat(number)}`)}`)\n                    break;\n                case '*':\n                    setStoredNumber(`${limitSumIntegars(`${parseFloat(storedNumber) * parseFloat(number)}`)}`)\n                    break;\n                default:\n                    break;\n            }\n            setNumber('');\n        }\n    }\n\n    return (\n        <NumberContext.Provider \n            value={{\n                handleSetDisplayValue,\n                handleSetStoredValue,\n                handleBackButton,\n                handleClearValue,\n                handleSetCalcFunction,\n                handleToggleNegative,\n                handleKeyInput,\n                handleMath,\n                number,\n                storedNumber,\n                setNumber,\n                functionType\n            }}\n        >\n            { props.children }\n        </NumberContext.Provider>\n    )\n}\n\nexport default NumberProvider;","export const themes = {\n    dark: {\n        app: {\n            backgroundColor: \"#ffdea6\",\n            color: \"#160504\"\n        },\n        calc: {\n            backgroundColor: \"#271F1F\"\n        },\n        display: {\n            backgroundColor: \"#423C3C\"\n        },\n        button: {\n            backgroundColor: \"#5F5959\"\n        },\n        operationButton: {\n            backgroundColor: \"#ff9130\"\n        },\n        modifierButton: {\n            backgroundColor: \"#9D9797\"\n        },\n        controls: {\n            dark: \"#271F1F\",\n            accent: \"#ff9130\"\n        }\n    },\n    light: {\n        app: {\n            backgroundColor: \"#374047\",\n            color: \"#DEE1E3\"\n        },\n        calc: {\n            backgroundColor: \"#97A1A7\"\n        },\n        display: {\n            backgroundColor: \"#50575F\"\n        },\n        button: {\n            backgroundColor: \"#3B4148\"\n        },\n        operationButton: {\n            backgroundColor: \"#7BD1A0\"\n        },\n        modifierButton: {\n            backgroundColor: \"#666F79\"\n        },\n        controls: {\n            dark: \"#97A1A7\",\n            accent: \"#7BD1A0\"\n        }\n    }\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { themes } from '../themes/ThemeStyles';\n\nconst initialState = {\n    light: false,\n    theme: themes.dark,\n    toggle: () => {}\n}\n\nexport const ThemeContext = React.createContext(initialState);\n\nconst ThemeProvider = ({ children }) => {\n    const [light, setLight] = useState(false);\n\n    // Get theme preference from local storage \n    useEffect(() => {\n        const isLight = localStorage.getItem('light') === 'true';\n        setLight(isLight);\n    }, [light])\n\n    // Toggles between themes\n    const toggle = () => {\n        const isLight = !light;\n        localStorage.setItem('light', JSON.stringify(isLight));\n        setLight(isLight);\n    }\n\n    // Select styles based on theme\n    const theme = light ? themes.light : themes.dark;\n\n    return (\n        <ThemeContext.Provider\n            value={{ theme, light, toggle }}\n        >\n            { children }\n        </ThemeContext.Provider>\n    )\n}\n\nexport default ThemeProvider;","import React, { useContext } from \"react\";\nimport { NumberContext } from '../context/NumberProvider';\nimport { ThemeContext } from \"../context/ThemeProvider\";\n\nconst NumberButton = ({ buttonValue }) => {\n    \n    const { handleSetDisplayValue } = useContext(NumberContext);\n    const { theme } = useContext(ThemeContext);\n\n    return (\n        // Checks if buttonValue is zero to accomodate styling\n        <button \n            type=\"button\"\n            className={`button ${buttonValue === 0 ? 'button-zero' : ''}`}\n            style={{ backgroundColor: theme.button.backgroundColor}}\n            onClick={() => handleSetDisplayValue(buttonValue)}  \n        >\n            { buttonValue }\n        </button>\n    );\n};\n\nexport default NumberButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from '../context/NumberProvider';\nimport { ThemeContext } from \"../context/ThemeProvider\";\n\nconst EqualsButton = () => {\n    \n    const { handleMath } = useContext(NumberContext);\n    const { theme } = useContext(ThemeContext);\n\n    return (\n        <button\n            type=\"button\"\n            className=\"button button-operator\"\n            style={{ backgroundColor: theme.operationButton.backgroundColor }}\n            onClick={() => handleMath()}\n        >\n            =\n        </button>\n    );\n};\n\nexport default EqualsButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from '../context/NumberProvider';\nimport { ThemeContext } from \"../context/ThemeProvider\";\n\nconst ClearButton = () => {\n    \n    const { handleClearValue } = useContext(NumberContext);\n    const { theme } = useContext(ThemeContext);\n\n    return (\n        <button \n            type=\"button\" \n            className=\"button button-modifier\"\n            style={{ backgroundColor: theme.modifierButton.backgroundColor }}\n            onClick={() => handleClearValue()}\n        >\n            C\n        </button>\n    );\n};\n\nexport default ClearButton;","export const symbols = [\n    { operator: \"/\", code: \"247\" },\n    { operator: \"*\", code: \"215\" },\n    { operator: \"-\", code: \"8722\" },\n    { operator: \"+\", code: \"43\" }\n];\n","import React, { useContext } from \"react\";\nimport { NumberContext } from '../context/NumberProvider';\nimport { ThemeContext } from \"../context/ThemeProvider\";\nimport { symbols } from \"../lib/Symbols\"\n\nconst OperationButton = ({ buttonValue }) => {\n    \n    const { handleSetCalcFunction } = useContext(NumberContext)\n    const { theme } = useContext(ThemeContext);\n\n    return (\n        <button \n            type=\"button\" \n            className=\"button button-operator\"\n            style={{ backgroundColor: theme.operationButton.backgroundColor }}\n            onClick={() => handleSetCalcFunction(buttonValue)}\n        >\n            {   // Display operator symbol\n                String.fromCharCode(\n                    symbols.filter(code => code.operator === buttonValue)\n                    .map(item => item.code)\n                )\n            }\n        </button>\n    );\n};\n\nexport default OperationButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from '../context/NumberProvider';\nimport { ThemeContext } from \"../context/ThemeProvider\";\n\nconst NegativeButton = () => {\n    \n    const { handleToggleNegative } = useContext(NumberContext);\n    const { theme } = useContext(ThemeContext);\n\n    return (\n        <button \n            type=\"button\"\n            className=\"button button-modifier\"\n            style={{ backgroundColor: theme.modifierButton.backgroundColor }}\n            onClick={() => handleToggleNegative()}\n        >\n            -/+\n        </button>\n    );\n};\n\nexport default NegativeButton;","import React, { useContext } from \"react\";\nimport { NumberContext } from '../context/NumberProvider';\nimport { ThemeContext } from \"../context/ThemeProvider\";\n\nconst BackButton = () => {\n    \n    const { handleBackButton } = useContext(NumberContext);\n    const { theme } = useContext(ThemeContext);\n\n    return (\n        <button\n            type=\"button\"\n            className=\"button button-modifier\"\n            style={{ backgroundColor: theme.modifierButton.backgroundColor }}\n            onClick={() => handleBackButton()}\n        >\n            {String.fromCharCode(8592)}\n        </button>\n    );\n};\n\nexport default BackButton;\n","import React from \"react\";\n\n// Components\nimport NumberButton from \"./NumberButton\";\nimport EqualsButton from \"./EqualsButton\";\nimport ClearButton from \"./ClearButton\";\nimport OperationButton from \"./OperationButton\";\nimport NegativeButton from \"./NegativeButton\";\nimport BackButton from \"./BackButton\";\n\nconst Buttons = () => {\n    return (\n        <div className=\"calc-buttons\">\n            <ClearButton />\n            <BackButton />\n            <NegativeButton />\n            <OperationButton buttonValue=\"/\" />\n            <NumberButton buttonValue={7} />\n            <NumberButton buttonValue={8} />\n            <NumberButton buttonValue={9} />\n            <OperationButton buttonValue=\"*\" />\n            <NumberButton buttonValue={4} />\n            <NumberButton buttonValue={5} />\n            <NumberButton buttonValue={6} />\n            <OperationButton buttonValue=\"-\" />\n            <NumberButton buttonValue={1} />\n            <NumberButton buttonValue={2} />\n            <NumberButton buttonValue={3} />\n            <OperationButton buttonValue=\"+\" />\n            <NumberButton buttonValue={0} />\n            <NumberButton buttonValue=\".\" />\n            <EqualsButton />\n        </div>\n    )\n};\n\nexport default Buttons;\n","import React, { useContext } from 'react';\n// Theme\nimport { ThemeContext } from '../context/ThemeProvider'\n// State\nimport { NumberContext } from '../context/NumberProvider';\n// Lib functions\nimport { symbols } from '../lib/Symbols';\n\nconst Display = (props) => {\n    const { theme } = useContext(ThemeContext);\n    const { number, storedNumber, functionType } = useContext(NumberContext);\n\n    const formatSymbol = (type) => {\n        const formattedSymbol = String.fromCharCode(symbols\n            .filter(code => code.operator === type)\n            .map(item => item.code)\n        );\n        return formattedSymbol;\n    }\n\n    // Adds line breaks to numbers too long to fit onto calc display\n    const addLineBreaks = num => {\n        let formattedNum = \"\";\n        const arr = num.match(/.{1,12}/g);\n\n        if (arr) {\n            for (let i = 0; i < arr.length; i++) {\n                formattedNum += arr[i] + \"\\n\";\n            }\n        }\n        return formattedNum;\n    };\n\n    return (\n        <div \n            className=\"calc-display\"\n            style={{\n                backgroundColor: theme.display.backgroundColor\n            }}\n        >\n            <span className=\"display-expression\">\n                {storedNumber && functionType && number ? \n                    (`${storedNumber} ${formatSymbol(functionType)} ${number}`) \n                    : ('')}\n            </span>\n            <span className=\"display-number\">\n                {!number.length && !storedNumber ? \"0\" : addLineBreaks(number) || addLineBreaks(storedNumber)}\n            </span>\n            {/* {props.firstLoad ? 'True' : 'False'} */}\n        </div>\n    );\n}\n\nexport default Display;","import React, { useEffect, useContext } from \"react\";\n// State\nimport { NumberContext } from '../context/NumberProvider';\n// Components\nimport Buttons from \"./Buttons\";\nimport Display from \"./Display\";\n// Theme\nimport { ThemeContext } from \"../context/ThemeProvider\";\n// Animation\nimport { motion } from \"framer-motion\";\n\nconst Calc = () => {\n    const { theme } = useContext(ThemeContext);\n    // For keyboard input of numbers\n    const { handleKeyInput } = useContext(NumberContext);\n\n    useEffect(() => {\n        const handleKeyDown = (e) => handleKeyInput(e.key)\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        }\n    })\n\n\n    return (\n        <motion.div\n            className=\"calc-wrapper\"\n            animate={{ scale: 0.9 }}\n            style={{\n                backgroundColor: theme.calc.backgroundColor\n            }}\n        >\n            <Display />\n            <Buttons />\n        </motion.div>\n    );\n};\n\nexport default Calc;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from '../context/ThemeProvider';\n\nconst Controls = () => {\n    const { theme, toggle, light } = useContext(ThemeContext);\n\n    return (\n        <button\n                type=\"button\"\n                className=\"controls\"\n                onClick={toggle}\n            >\n            <div className=\"control-theme\">\n                <div\n                    className=\"control-theme-color-one\"\n                    style={{ backgroundColor: theme.controls.dark }}\n                ></div>\n                <div\n                    className=\"control-theme-color-two\"\n                    style={{ backgroundColor: theme.controls.accent }}\n                ></div>\n            </div>\n            <h3 style={{ color: theme.app.color }}>{light ? 'Mint' : 'Classic'}</h3>\n        </button>\n    );\n}\n\nexport default Controls;","import React, { useContext } from 'react';\n\n// Components\nimport Controls from \"./Controls\";\n\n// Theme\nimport { ThemeContext } from '../context/ThemeProvider';\n\n// Animation\nimport { motion } from 'framer-motion';\n\nconst Sidebar = () => {\n    const { theme } = useContext(ThemeContext);\n    return (\n        <motion.aside\n            className=\"sidebar-main\"\n            animate={{ opacity: 1 }}\n            transition={{ duration: 1.5 }}\n            style={{\n                color: theme.app.color\n            }}\n        >\n            <div className=\"sidebar-container\">\n                <h1>Calc.</h1>\n                <p>\n                    This calculator is largely based on the app found in iOS. I\n                    built it using React in order to better understand React\n                    Hooks. State is managed with the useContext API. Let me know\n                    if you have questions, and feel free to check out my other projects{\" \"}\n                    <a\n                        style={{ color: theme.app.color }}\n                        href=\"http://ethanling.com/projects\"\n                    >\n                        here\n                    </a>.\n                </p>\n                <p>\n                    Made in 2019 by{\" \"}\n                    <a\n                        style={{ color: theme.app.color }}\n                        href=\"http://ethanling.com\"\n                    >\n                        Ethan Ling\n                    </a>\n                    .\n                </p>\n                <Controls />\n            </div>\n        </motion.aside>\n    );\n}\n\nexport default Sidebar;","import React, { useContext } from \"react\";\nimport Calc from \"./components/Calc\";\nimport Sidebar from \"./components/Sidebar\";\nimport NumberProvider from \"./context/NumberProvider\";\nimport { ThemeContext } from \"./context/ThemeProvider\";\n\nconst App = () => {\n    const { theme } = useContext(ThemeContext);\n    return (\n        <div\n            className=\"App\"\n            style={{ \n                backgroundColor: theme.app.backgroundColor,\n            }}\n        >\n            <Sidebar />\n            <NumberProvider>\n                <Calc />\n            </NumberProvider>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ThemeProvider from './context/ThemeProvider';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <ThemeProvider>\n        <App />\n    </ThemeProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}